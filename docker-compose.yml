version: '3.8'

services:
  # Main LLMAdventure service
  llmadventure:
    build:
      context: .
      target: production
    container_name: llmadventure
    restart: unless-stopped
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - PYTHONUNBUFFERED=1
    volumes:
      - llmadventure_data:/app/data
      - llmadventure_saves:/app/saves
      - llmadventure_logs:/app/logs
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - llmadventure_network

  # Web interface service
  llmadventure-web:
    build:
      context: .
      target: web
    container_name: llmadventure-web
    restart: unless-stopped
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - PYTHONUNBUFFERED=1
      - PORT=8000
    volumes:
      - llmadventure_data:/app/data
      - llmadventure_saves:/app/saves
      - llmadventure_logs:/app/logs
    ports:
      - "8001:8000"
    depends_on:
      - llmadventure
    networks:
      - llmadventure_network

  # Development service
  llmadventure-dev:
    build:
      context: .
      target: development
    container_name: llmadventure-dev
    restart: unless-stopped
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - PYTHONUNBUFFERED=1
      - DEBUG=1
    volumes:
      - .:/app
      - llmadventure_data:/app/data
      - llmadventure_saves:/app/saves
      - llmadventure_logs:/app/logs
    ports:
      - "8002:8000"
      - "5678:5678"  # Debug port
    command: ["python", "-m", "pytest", "--cov=llmadventure", "-v"]
    networks:
      - llmadventure_network

  # CLI-only service
  llmadventure-cli:
    build:
      context: .
      target: cli
    container_name: llmadventure-cli
    restart: unless-stopped
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - PYTHONUNBUFFERED=1
    volumes:
      - llmadventure_data:/app/data
      - llmadventure_saves:/app/saves
      - llmadventure_logs:/app/logs
    stdin_open: true
    tty: true
    networks:
      - llmadventure_network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: llmadventure-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - llmadventure_network

  # PostgreSQL for persistent data (optional)
  postgres:
    image: postgres:15-alpine
    container_name: llmadventure-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=llmadventure
      - POSTGRES_USER=llmadventure
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-llmadventure}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - llmadventure_network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: llmadventure-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - llmadventure
      - llmadventure-web
    networks:
      - llmadventure_network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: llmadventure-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - llmadventure_network

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: llmadventure-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - llmadventure_network

volumes:
  llmadventure_data:
    driver: local
  llmadventure_saves:
    driver: local
  llmadventure_logs:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  llmadventure_network:
    driver: bridge 